<%- include('../partials/header', { title, username }) %>

<%- include('../partials/header', { title, username }) %>

<div class="d-flex" style="height: calc(100vh - 64px);">
  
  <!-- 1️⃣ LEFT: Places List -->
  <nav class="border-end p-3 environment-chat-places d-flex flex-column" style="width:20%; overflow-y:auto; height:100%;">
    <h6>Places</h6>
    <ul class="list-group flex-grow-1">
      <!-- Render lobby place at the top if it exists in places -->
      <% const lobbyPlace = places && places.find(p => p.id === env.id); %>
      <% if (lobbyPlace) { %>
        <li class="list-group-item <%= !activePlaceId ? 'active' : '' %>" style="padding:0; position:relative;">
          <a href="#" class="lobby-link text-decoration-none d-flex align-items-center w-100 h-100" data-place-id="<%= lobbyPlace.id %>" style="padding:0.75rem 1.25rem; color:inherit; min-height:48px; width:100%; height:100%; position:relative; z-index:2;">
            <%= lobbyPlace.emoji %> <%= lobbyPlace.name %>
          </a>
        </li>
      <% } %>
      <% function renderPlaces(parentId, level) { %>
        <% places.filter(p => (p.parentId || 0) === (parentId || 0) && p.id !== env.id).forEach(p => { %>
          <li class="list-group-item place-tree-level-<%= level %> <%= activePlaceId===p.id ? 'active' : '' %>" data-parent-id="<%= p.parentId %>" style="padding:0; position:relative;">
            <a href="#" class="place-link text-decoration-none d-flex align-items-center w-100 h-100" data-place-id="<%= p.id %>" style="padding:0.75rem 1.25rem; color:inherit; min-height:48px; width:100%; height:100%; position:relative; z-index:2;">
              <%= p.emoji %> <%= p.name %>
            </a>
          </li>
          <% renderPlaces(p.id, level+1); %>
        <% }) %>
      <% } %>
      <% renderPlaces(null, 0); %>
    </ul>
    <div class="d-grid mt-3">
      <a href="/environments" class="btn btn-outline-danger">
        <i class="bi bi-door-open me-1"></i>Go Back
      </a>
    </div>
  </nav>

  <!-- 2️⃣ CENTER: Chat History + Input -->
  <main class="flex-grow-1 d-flex flex-column p-3 position-relative" style="overflow: hidden;">
    <!-- Chat history -->
    <div id="chat-history" class="flex-grow-1 overflow-auto mb-3">
      <% messages.forEach(msg => { %>
        <% if (msg.type === 'action') { %>
          <div class="mb-2 chat-action chat-<%= msg.action_type %>">
            * <%= msg.username %> <%= msg.content %>
          </div>
        <% } else { %>
          <div class="mb-2 chat-normal">
            <strong><%= msg.username %>:</strong> <%= msg.content %>
          </div>
        <% } %>
      <% }) %>
    </div>

    <!-- Typing indicator -->
    <span id="typing-indicator" class="small text-muted mb-2" style="display:none;"></span>
    <!-- Slash command suggestions -->
    <div id="slash-suggestions" class="slash-suggestions shadow-sm" style="display:none; position:absolute; left:0; right:0; bottom:60px; z-index:10;"></div>
    <!-- Chat input and suggestions container -->
    <div class="chat-input-container position-relative w-100">
      <div id="slash-suggestions" class="slash-suggestions shadow-sm" style="display:none;"></div>
      <form id="chat-form" class="d-flex">
        <input type="text" name="message" class="form-control me-2" placeholder="Type your message…" required>
        <button class="btn btn-primary d-flex align-items-center" type="submit">
          <i class="bi bi-caret-right-fill me-1"></i><span>Send</span>
        </button>
      </form>
    </div>
  </main>

  <!-- 3️⃣ RIGHT: Members List -->
  <aside class="border-start p-3" style="width: 20%; overflow-y: auto;">
    <h6>Members</h6>
    <ul class="list-group">
      <% members.forEach(m => { %>
        <li class="list-group-item d-flex justify-content-between align-items-center">
          <%= m.username %>
          <% if (m.role === 'owner') { %>
            <span title="Owner" style="font-size:1.1em; color:#888; margin-left:0.5em; display:flex; align-items:center; justify-content:center; width:1.8em; height:1.2em;">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" width="18" height="15" fill="currentColor" style="display:block; margin:auto;"><path d="M309 106c11.4-7 19-19.7 19-34c0-22.1-17.9-40-40-40s-40 17.9-40 40c0 14.4 7.6 27 19 34L209.7 220.6c-9.1 18.2-32.7 23.4-48.6 10.7L72 160c5-6.7 8-15 8-24c0-22.1-17.9-40-40-40S0 113.9 0 136s17.9 40 40 40c.2 0 .5 0 .7 0L86.4 427.4c5.5 30.4 32 52.6 63 52.6l277.2 0c30.9 0 57.4-22.1 63-52.6L535.3 176c.2 0 .5 0 .7 0c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40c0 9 3 17.3 8 24l-89.1 71.3c-15.9 12.7-39.5 7.5-48.6-10.7L309 106z"/></svg>
            </span>
          <% } %>
        </li>
      <% }) %>
    </ul>
  </aside>

</div>

<!-- Footer removed for chat -->
<script src="/socket.io/socket.io.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const socket = io();
    const envId  = '<%= env.id %>';
    let   activePlace = null; // null = lobby

    // Elements
    const form    = document.getElementById('chat-form');
    const input   = form.querySelector('input[name="message"]');
    const hist    = document.getElementById('chat-history');
    const placeLinks = document.querySelectorAll('.place-link');
    const lobbyLink  = document.querySelector('.lobby-link');

    // 1) Join Lobby and fetch its messages
    socket.emit('joinEnv', envId);
    socket.on('initialLobbyMessages', msgs => {
      hist.innerHTML = ''; // clear
      msgs.forEach(append);
    });

    // 2) Join and switch to a place
    function updateActiveList() {
      document.querySelectorAll('.list-group-item').forEach(li => li.classList.remove('active'));
      if (activePlace === null) {
        lobbyLink.closest('.list-group-item').classList.add('active');
      } else {
        document.querySelectorAll('.place-link').forEach(a => {
          if (+a.dataset.placeId === activePlace) {
            a.closest('.list-group-item').classList.add('active');
          }
        });
      }
    }

    function switchToPlace(placeId) {
      activePlace = placeId;
      hist.innerHTML = ''; // clear
      socket.emit('joinPlace', { envId, placeId });
      updateActiveList();
    }
    placeLinks.forEach(a => {
      a.addEventListener('click', e => {
        e.preventDefault();
        switchToPlace(+a.dataset.placeId);
      });
    });
    lobbyLink.addEventListener('click', e => {
      e.preventDefault();
      activePlace = null;
      hist.innerHTML = '';
      socket.emit('joinEnv', envId);
      updateActiveList();
    });

    // 3) Handle incoming batches
    socket.on('initialPlaceMessages', msgs => {
      hist.innerHTML = '';
      msgs.forEach(append);
    });
    socket.on('lobbyMessage', msg => {
      if (activePlace === null) append(msg);
    });
    socket.on('placeMessage', msg => {
      if (msg.placeId === activePlace) append(msg);
    });

    // Typing indicator logic
    const typingIndicator = document.getElementById('typing-indicator');
    let typingTimeout;
    let lastTypedRoom = null;

    input.addEventListener('input', () => {
      if (activePlace === null) {
        socket.emit('typing', { envId });
        lastTypedRoom = `lobby-${envId}`;
      } else {
        socket.emit('typing', { envId, placeId: activePlace });
        lastTypedRoom = `place-${envId}-${activePlace}`;
      }
    });

    socket.on('showTyping', ({ username, envId: typingEnv, placeId }) => {
      // Only show if in the same room
      if (
        (activePlace === null && !placeId && typingEnv == envId && username !== '<%= username %>') ||
        (activePlace !== null && placeId == activePlace && typingEnv == envId && username !== '<%= username %>')
      ) {
        typingIndicator.textContent = `${username} is typing...`;
        typingIndicator.style.display = '';
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
          typingIndicator.style.display = 'none';
        }, 2000);
      }
    });

    // Slash command suggestion logic
    const slashSuggestions = document.getElementById('slash-suggestions');
    const commands = [
      { cmd: '/roll', desc: 'Roll dice, e.g. /roll 2d6' },
      { cmd: '/me', desc: 'Action, e.g. /me waves' },
      { cmd: '/do', desc: 'Description, e.g. /do the wind blows' }
    ];
    function renderSlashSuggestions() {
      slashSuggestions.innerHTML = commands.map(c =>
        `<div class=\"slash-suggestion-item\" data-cmd=\"${c.cmd}\"><strong>${c.cmd}</strong> <span class=\"text-muted\">${c.desc}</span></div>`
      ).join('');
      slashSuggestions.style.display = '';
      // Add click listeners
      slashSuggestions.querySelectorAll('.slash-suggestion-item').forEach(item => {
        item.addEventListener('mousedown', function(e) {
          e.preventDefault();
          input.value = this.getAttribute('data-cmd') + ' ';
          slashSuggestions.style.display = 'none';
          input.focus();
        });
      });
    }
    input.addEventListener('input', () => {
      const val = input.value;
      if (val.startsWith('/')) {
        renderSlashSuggestions();
      } else {
        slashSuggestions.style.display = 'none';
      }
    });
    input.addEventListener('blur', () => {
      setTimeout(() => { slashSuggestions.style.display = 'none'; }, 100);
    });
    input.addEventListener('focus', () => {
      if (input.value.startsWith('/')) renderSlashSuggestions();
    });

    // 4) Form submit → emit, not POST
    form.addEventListener('submit', e => {
      e.preventDefault();
      const content = input.value.trim();
      if (!content) return;
      if (activePlace === null) {
        socket.emit('lobbyMessage', { envId, content });
      } else {
        socket.emit('placeMessage', { envId, placeId: activePlace, content });
      }
      input.value = '';
      typingIndicator.style.display = 'none';
    });

    // 5) Handle system events for /roll, /me, /do, errors
    socket.on('roll', ({ username, count, sides, rolls, total }) => {
      appendSystem(`<strong>${username}</strong> rolled ${count}d${sides}: [${rolls.join(', ')}] = <strong>${total}</strong>`);
    });
    socket.on('action', ({ username, action }) => {
      appendSystem(`<em class="chat-me">* ${username} ${action}</em>`);
    });
    socket.on('desc', ({ username, text }) => {
      appendSystem(`<em class="chat-do">${text}</em>`);
    });
    socket.on('errorMessage', msg => {
      appendSystem(`<span class="text-danger">${msg}</span>`);
    });

    // Helper to append a system-style line
    function appendSystem(html) {
      const div = document.createElement('div');
      div.className = 'mb-2 text-muted';
      div.innerHTML = html;
      hist.appendChild(div);
      hist.scrollTop = hist.scrollHeight;
    }

    function append({ username, content, type, action_type }) {
      const div = document.createElement('div');
      if (type === 'action') {
        div.className = `mb-2 chat-action chat-${action_type || 'me'}`;
        div.innerHTML = `* ${username} ${content}`;
      } else {
        div.className = 'mb-2 chat-normal';
        div.innerHTML = `<strong>${username}:</strong> ${content}`;
      }
      hist.appendChild(div);
      hist.scrollTop = hist.scrollHeight;
    }
  });
</script>
