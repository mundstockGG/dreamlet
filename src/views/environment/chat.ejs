<%- include('../partials/header', { title, username }) %>

<%- include('../partials/header', { title, username }) %>

<div class="d-flex" style="height: calc(100vh - 64px);">
  
  <!-- 1️⃣ LEFT: Places List -->
  <nav class="border-end p-3 environment-chat-places" style="width:20%; overflow-y:auto;">
    <h6>Places</h6>
    <ul class="list-group">
      <!-- Lobby link -->
      <li class="list-group-item <%= !activePlaceId ? 'active' : '' %>">
        <a href="#" class="lobby-link text-decoration-none">💬 Lobby</a>
      </li>
      <% places.forEach(p => { %>
        <li class="list-group-item <%= activePlaceId===p.id ? 'active' : '' %>">
          <a href="#" class="place-link text-decoration-none" data-place-id="<%= p.id %>">
            <%= p.emoji %> <%= p.name %>
          </a>
        </li>
      <% }) %>
    </ul>
  </nav>

  <!-- 2️⃣ CENTER: Chat History + Input -->
  <main class="flex-grow-1 d-flex flex-column p-3" style="overflow: hidden;">
    <!-- Chat history -->
    <div id="chat-history" class="flex-grow-1 overflow-auto mb-3">
      <% messages.forEach(msg => { %>
        <div class="mb-2">
          <strong><%= msg.username %>:</strong> <%= msg.content %>
        </div>
      <% }) %>
    </div>

    <!-- Chat input -->
    <form id="chat-form" class="d-flex">
      <input type="text" name="message" class="form-control me-2" placeholder="Type your message…" required>
      <button class="btn btn-primary">Send</button>
    </form>
  </main>

  <!-- 3️⃣ RIGHT: Members List -->
  <aside class="border-start p-3" style="width: 20%; overflow-y: auto;">
    <h6>Members</h6>
    <ul class="list-group">
      <% members.forEach(m => { %>
        <li class="list-group-item d-flex justify-content-between align-items-center">
          <%= m.username %> 
          <span class="badge bg-secondary"><%= m.role %></span>
        </li>
      <% }) %>
    </ul>
  </aside>

</div>

<%- include('../partials/footer') %>
<script src="/socket.io/socket.io.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const socket = io();
    const envId  = '<%= env.id %>';
    let   activePlace = null; // null = lobby

    // Elements
    const form    = document.getElementById('chat-form');
    const input   = form.querySelector('input[name="message"]');
    const hist    = document.getElementById('chat-history');
    const placeLinks = document.querySelectorAll('.place-link');
    const lobbyLink  = document.querySelector('.lobby-link');

    // 1) Join Lobby and fetch its messages
    socket.emit('joinEnv', envId);
    socket.on('initialLobbyMessages', msgs => {
      hist.innerHTML = ''; // clear
      msgs.forEach(append);
    });

    // 2) Join and switch to a place
    function updateActiveList() {
      document.querySelectorAll('.list-group-item').forEach(li => li.classList.remove('active'));
      if (activePlace === null) {
        lobbyLink.closest('.list-group-item').classList.add('active');
      } else {
        document.querySelectorAll('.place-link').forEach(a => {
          if (+a.dataset.placeId === activePlace) {
            a.closest('.list-group-item').classList.add('active');
          }
        });
      }
    }

    function switchToPlace(placeId) {
      activePlace = placeId;
      hist.innerHTML = ''; // clear
      socket.emit('joinPlace', { envId, placeId });
      updateActiveList();
    }
    placeLinks.forEach(a => {
      a.addEventListener('click', e => {
        e.preventDefault();
        switchToPlace(+a.dataset.placeId);
      });
    });
    lobbyLink.addEventListener('click', e => {
      e.preventDefault();
      activePlace = null;
      hist.innerHTML = '';
      socket.emit('joinEnv', envId);
      updateActiveList();
    });

    // 3) Handle incoming batches
    socket.on('initialPlaceMessages', msgs => {
      hist.innerHTML = '';
      msgs.forEach(append);
    });
    socket.on('lobbyMessage', msg => {
      if (activePlace === null) append(msg);
    });
    socket.on('placeMessage', msg => {
      if (msg.placeId === activePlace) append(msg);
    });

    // 4) Form submit → emit, not POST
    form.addEventListener('submit', e => {
      e.preventDefault();
      const content = input.value.trim();
      if (!content) return;
      if (activePlace === null) {
        socket.emit('lobbyMessage', { envId, content });
      } else {
        socket.emit('placeMessage', { envId, placeId: activePlace, content });
      }
      input.value = '';
    });

    function append({ username, content, createdAt }) {
      const div = document.createElement('div');
      div.classList.add('mb-2');
      div.innerHTML = `<strong>${username}:</strong> ${content}`;
      hist.appendChild(div);
      hist.scrollTop = hist.scrollHeight;
    }
  });
</script>
